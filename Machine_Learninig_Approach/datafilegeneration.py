# -*- coding: utf-8 -*-
"""DataFileGeneration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KyO3t7a2GDhjzpoMXETFal6hOGN8_Nhn
"""

"""
This script generates a csv file that has information about the
webpageimage's intensity, channel orientation and red-green and
blue yellow sub channel conspicuity values at each pixel. For eg.
there is a image of size 32x32, it has 1024 pixels. For an image
of this size, in CSV file 1024 rows representing each pixel are 
created, first column has the file name, second column has the 
intensity value, 3rd column has channel orientation, 4th column 
has the subchannel conspicuity value i.e sum of blue-yellow and 
red-green conspicuity value at that pixel. 5th column has the eye 
fixation value  and 6th column has labels 1(for eyefixation value
 >150) and 0(otherwise) corresponding to that pixel. Similarly,
the data is created for each image in the training dataset and 
appended together in the csv file. 
"""

# Uncomment if using Google colab
# from google.colab import drive
# drive.mount('/content/drive')

import cv2
import os
import numpy as np

# folder location for all the consipicuity maps
currentDir = "/content/drive/My Drive/HCI_prep/IttiKoch/"

# folder location of intensity conspicuity maps of all the images in the training set
intensityFolder = os.path.join(currentDir, "intensity_32")
# print(intensityFolder)

# folder location of chanel orientation conspicuity maps of all the images in the training set
gaborFolder = os.path.join(currentDir, "gabor_32")

# folder location of red-green subchannel conspicuity maps of all the images in the training set
rgfolder = os.path.join(currentDir, "rg_32")

# folder location of blue-green subchannel conspicuity maps of all the images in the training set
byFolder = os.path.join(currentDir, "by_32")

# folder location of combined subchannel conspicuity maps of all the images in the training set
cFolder = os.path.join(currentDir, "c_32")

# folder location of eye fixation maps of all the images in the training set
eyeFixationFolder = os.path.join(currentDir, "eyeFixationResized33_32")

# array for collecting the conspicuity values and corresponding
# eyefixation values for each pixel of a image in the training set
data = []

for i in range(0, 140):
    file = str(i) + ".png"
    # if file.endswith(".png"):
    try:
        # print(file)
        string = file.split(".")
        intensitypath = os.path.join(intensityFolder, file)
        gaborpath = os.path.join(gaborFolder, file)
        cpath = os.path.join(cFolder, file)
        eyeFixationpath = os.path.join(eyeFixationFolder, file)
        intensityImg = cv2.imread(intensitypath, 0)
        # print(intensityImg)
        DataArr = np.array(intensityImg)
        DataArr = DataArr.flatten()
        DataArr = np.transpose(DataArr)
        gaborImg = cv2.imread(gaborpath, 0)
        gaborImg = np.array(gaborImg)
        gaborImg = np.transpose(gaborImg.flatten())
        DataArr = np.column_stack([DataArr, gaborImg])
        cImg = cv2.imread(cpath, 0)
        cImg = np.array(cImg)
        cImg = np.transpose(cImg.flatten())
        DataArr = np.column_stack([DataArr, cImg])
        eyeFixArr = cv2.imread(eyeFixationpath, 0)
        eyeFixArr = np.array(eyeFixArr)
        eyeFixArr = np.transpose(eyeFixArr.flatten())
        # print(eyeFixArr)
        # print(DataArr)
        # print(eyeFixArr.shape)
        # print(DataArr.shape)
        DataArr = np.column_stack([DataArr, eyeFixArr])
        names = []
        label = []
        # for i in range
        for item in np.nditer(eyeFixArr):
            names.append(int(string[0]))
            # print("done1")
            # print(item)
            if item > 150:
                label.append(1)
            #
            else:
                label.append(0)
            #
        # print(len(label))
        label = np.transpose(np.asarray(label, dtype="int"))
        names = np.transpose(np.asarray(names))
        # print(label.shape)
        DataArr = np.column_stack([names, DataArr, label])
        # names = np.rec.array(names, dtype=[("names", np.str)])
        # DataArr = append_fields(names, 'DataArr', DataArr, usemask=False, dtypes=[np.int])
        # DataArr = np.column_stack([names, DataArr])
        data.append(DataArr)
    except:
        print("File is corrupt")

# print(type(data[0]))
# print(data[0])
numpyArr = data[0]

for i in range(1, len(data)):
    numpyArr = np.row_stack([numpyArr, data[i]])

# saving the data to a numpy array and then saving to a csv file.
data = np.asarray(data)
np.savetxt("/content/drive/My Drive/HCI_prep/IttiKoch/data_32.csv", numpyArr, delimiter=",")
